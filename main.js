// Importar las funciones que renderizan cada gr√°fico desde sus respectivos archivos
import { renderPlotlyChart } from './charts/plotly-chart.js';
import { renderEChartsChart } from './charts/echarts-chart.js';
import { renderDygraphChart } from './charts/dygraphs-chart.js';
import { renderLeafletMap } from './charts/leaflet-map.js';
import { renderD3Chart } from './charts/d3-chart.js';
import { renderApexChart } from './charts/apex-chart.js';
import { renderVisNetwork } from './charts/vis-network.js';
import { renderBillboardChart } from './charts/billboard-chart.js';
import { renderVegaLiteChart } from './charts/vegalite-chart.js';
import { renderChartJS } from './charts/chartjs-chart.js';

// Datos de las librer√≠as con su funci√≥n de renderizado asociada
const libraries = [
    { id: 'plotly', icon: 'ü•á', js: 'Plotly.js', r: 'plotly', license: 'MIT', analysis: '<strong>Excepcional.</strong> Es el est√°ndar de oro para gr√°ficos interactivos en R. Ofrece control total sobre cada aspecto: colores, leyendas, ejes, animaciones y m√°s. Su funci√≥n <code>ggplotly()</code> permite convertir un gr√°fico est√°tico de <code>ggplot2</code> a un objeto <code>plotly</code> de forma directa.', renderFunc: renderPlotlyChart },
    { id: 'echarts', icon: 'üöÄ', js: 'Apache ECharts', r: 'echarts4r', license: 'Apache 2.0', analysis: '<strong>Excepcional.</strong> Incre√≠blemente potente y vers√°til, ideal para dashboards llamativos. Permite crear visualizaciones muy complejas con animaciones fluidas, efectos de sombras y una personalizaci√≥n granular.', renderFunc: renderEChartsChart },
    { id: 'dygraphs', icon: 'üìà', js: 'Dygraphs', r: 'dygraphs', license: 'MIT', analysis: '<strong>Muy Alto.</strong> El especialista para series de tiempo. Su rendimiento con millones de puntos es bastante alto y su interactividad (zoom/paneo) es muy fluida.', renderFunc: renderDygraphChart },
    { id: 'leaflet', icon: 'üó∫Ô∏è', js: 'Leaflet', r: 'leaflet', license: 'BSD-2-Clause', analysis: '<strong>Excepcional (para Mapas).</strong> Es la librer√≠a por defecto para mapas interactivos. Permite capas, marcadores personalizados, pol√≠gonos, y tiene una integraci√≥n perfecta con Shiny.', renderFunc: renderLeafletMap },
    { id: 'd3', icon: 'üé®', js: 'D3.js', r: 'r2d3 / d3r', license: 'BSD-3-Clause', analysis: '<strong>Total.</strong> M√°s que una librer√≠a, es una "gram√°tica de visualizaci√≥n" que ofrece un poder de personalizaci√≥n ilimitado. La curva de aprendizaje es alta, pero con <code>r2d3</code> se puede integrar cualquier visualizaci√≥n D3 en Shiny.', renderFunc: renderD3Chart },
    { id: 'apexcharts', icon: '‚ú®', js: 'ApexCharts.js', r: 'apexcharter', license: 'MIT', analysis: '<strong>Muy Alto.</strong> Ofrece gr√°ficos SVG modernos, limpios y muy elegantes con excelentes animaciones. Es una fant√°stica alternativa a Plotly para dashboards con una est√©tica muy cuidada.', renderFunc: renderApexChart },
    { id: 'visjs', icon: 'üï∏Ô∏è', js: 'vis.js', r: 'visNetwork', license: 'MIT / Apache 2.0', analysis: '<strong>Excepcional (para Redes).</strong> La mejor opci√≥n para visualizar grafos y redes interactivas. Permite simular f√≠sicas, manipular nodos y personalizar completamente la apariencia de la red.', renderFunc: renderVisNetwork },
    { id: 'billboard', icon: 'üìä', js: 'Billboard.js', r: 'billboarder', license: 'MIT', analysis: '<strong>Alto.</strong> Es un fork moderno y mantenido de la popular C3.js. Ofrece una API muy sencilla para crear gr√°ficos elegantes basados en D3, con excelente personalizaci√≥n.', renderFunc: renderBillboardChart },
    { id: 'vegalite', icon: '‚öôÔ∏è', js: 'Vegalite', r: 'vegawidget', license: 'BSD-3-Clause', analysis: '<strong>Muy Alto.</strong> Es una "gram√°tica de gr√°ficos interactivos", similar en filosof√≠a a <code>ggplot2</code>. Permite construir visualizaciones complejas a partir de reglas sencillas.', renderFunc: renderVegaLiteChart },
    { id: 'chartjs', icon: 'üßº', js: 'Chart.js', r: 'chartjs', license: 'MIT', analysis: '<strong>Alto.</strong> Famosa por su simplicidad y dise√±os limpios. Es muy f√°cil de usar y personalizar. Una opci√≥n muy efectiva para gr√°ficos sencillos y atractivos sin complicaciones.', renderFunc: renderChartJS },
];

document.addEventListener('DOMContentLoaded', function() {
    const tbody = document.getElementById('chart-table-body');
    
    // Generar las filas de la tabla
    libraries.forEach((lib) => {
        const chartContainerId = `${lib.id}-chart`;
        const row = `
            <tr class="hover:bg-gray-700/50 transition-colors duration-200">
                <td class="px-6 py-4 whitespace-nowrap text-2xl" title="${lib.js}">${lib.icon}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-white">${lib.js}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300"><code>${lib.r}</code></td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">${lib.license}</td>
                <td class="px-6 py-4 text-sm text-gray-300 analysis-cell">${lib.analysis}</td>
                <td class="px-6 py-4 text-sm text-gray-300 example-cell">
                    <div id="${chartContainerId}" class="chart-container" data-library-id="${lib.id}"></div>
                </td>
            </tr>
        `;
        tbody.innerHTML += row;
    });

    // Renderizar todos los gr√°ficos en la tabla
    libraries.forEach(lib => {
        if (lib.renderFunc) {
            lib.renderFunc(`${lib.id}-chart`);
        }
    });

    // Funcionalidad del Modal
    const modal = document.getElementById('chartModal');
    const modalChartContainer = document.getElementById('modal-chart-container');
    const closeModalBtn = document.getElementById('closeModal');
    let activeChartInstance = null;

    document.querySelectorAll('.chart-container').forEach(container => {
        container.addEventListener('click', function() {
            // *** SOLUCI√ìN 2: Destruir la instancia ANTES de abrir una nueva ***
            if (activeChartInstance) {
                if (typeof activeChartInstance.destroy === 'function') {
                    activeChartInstance.destroy();
                } else if (typeof activeChartInstance.dispose === 'function') { // ECharts usa dispose()
                    activeChartInstance.dispose();
                }
            }
            modalChartContainer.innerHTML = '';

            const libraryId = this.dataset.libraryId;
            const library = libraries.find(l => l.id === libraryId);
            
            if (library) {
                modal.classList.remove('hidden');
                requestAnimationFrame(() => {
                    activeChartInstance = library.renderFunc(modalChartContainer.id, true);
                });
            }
        });
    });

    const closeModal = () => {
        modal.classList.add('hidden');
        if (activeChartInstance) {
             if (typeof activeChartInstance.destroy === 'function') {
                activeChartInstance.destroy();
            } else if (typeof activeChartInstance.dispose === 'function') {
                activeChartInstance.dispose();
            }
        }
        modalChartContainer.innerHTML = '';
        activeChartInstance = null;
    };

    closeModalBtn.addEventListener('click', closeModal);
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal();
        }
    });
});
